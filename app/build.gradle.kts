plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.ksp.plugin)
    alias(libs.plugins.room.plugin)
//    jacoco
}

android {
    namespace = "com.hyundaiht.doorlocksampleapp"
    compileSdk = 35

    defaultConfig {
        applicationId = "com.hyundaiht.doorlocksampleapp"
        minSdk = 28
        targetSdk = 34
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary = true
        }
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }

        debug {
            isMinifyEnabled = false
            isTestCoverageEnabled = true // 커버리지 활성화 (debug 빌드만)
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    buildFeatures {
        compose = true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.1"
    }
    packaging {
        resources {
            excludes += "/META-INF/{AL2.0,LGPL2.1}"
        }
    }
    room {
        schemaDirectory("$projectDir/schemas")
    }

    //jacoco
//    testOptions {
//        unitTests.isIncludeAndroidResources = true
//        unitTests.isReturnDefaultValues = true
//    }
}

//jacoco {
//    toolVersion = "0.8.8" // JaCoCo 버전 설정
//    reportsDirectory = layout.buildDirectory.dir("customJacocoReportDir")
//}

//tasks.withType<Test>().configureEach {
    //noinspection WrongGradleMethod
//    extensions.configure(JacocoTaskExtension::class) {
//        println("configure JacocoTaskExtension execute")
//        isEnabled = true
//        setDestinationFile(layout.buildDirectory.file("jacoco/${name}.exec").get().asFile)
//        includes = emptyList()
//        excludes = emptyList()
//        excludeClassLoaders = emptyList()
//        isIncludeNoLocationClasses = false
//        sessionId = "<auto-generated value>"
//        isDumpOnExit = true
//        classDumpDir = null
//        output = JacocoTaskExtension.Output.FILE
//        address = "localhost"
//        port = 6300
//        isJmx = false
//    }
//}

//tasks.register<JacocoReport>("jacocoTestReport") {
//    println("JacocoReport jacocoTestReport execute")
//    dependsOn("testDebugUnitTest") // 테스트 실행 후 리포트 생성
//
//    reports {
//        html.required.set(true)
//        xml.required.set(false)
//        csv.required.set(false)
//        html.outputLocation.set(layout.buildDirectory.dir("jacocoHtml"))
//    }
//
//    val fileFilter = listOf("**/R.class", "**/R$*.class", "**/BuildConfig.*", "**/Manifest*.*")
//    val debugTree = fileTree("${buildDir}/intermediates/javac/debug") {
//        exclude(fileFilter)
//    }
//
//    classDirectories.setFrom(debugTree)
//    sourceDirectories.setFrom(
//        files(
//            "src/main/java",
//            "src/main/kotlin"
//        )
//    )
//    executionData.setFrom(fileTree(buildDir) {
//        include(
//            "outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec",
//            "jacoco/testDebugUnitTest.exec"
//        )
//    })
//}

dependencies {

    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.lifecycle.runtime.ktx)
    implementation(libs.androidx.activity.compose)
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.ui)
    implementation(libs.androidx.ui.graphics)
    implementation(libs.androidx.ui.tooling.preview)
    implementation(libs.androidx.material3)
    implementation(libs.androidx.biometric)
    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
    androidTestImplementation(platform(libs.androidx.compose.bom))
    androidTestImplementation(libs.androidx.ui.test.junit4)
    debugImplementation(libs.androidx.ui.tooling)
    debugImplementation(libs.androidx.ui.test.manifest)


    //Room
    implementation(libs.androidx.room.runtime)
    implementation(libs.androidx.room.paging)
    ksp(libs.androidx.room.compiler)
    testImplementation(libs.androidx.room.testing)

    //Gson
    implementation(libs.gson)

    //Retrofit
    implementation(libs.retrofit.core)
    implementation(libs.retrofit.kotlin.serialization)
    implementation(libs.converter.gson)
    implementation(libs.okhttp.logging)

    //Ktor
    implementation(libs.ktor.client.core)
    implementation(libs.ktor.client.websockets)
    implementation(libs.ktor.client.cio)
    implementation(libs.ktor.client.content.negotiation)
    implementation(libs.ktor.client.logging)
    implementation(libs.ktor.client.okhttp)
    implementation(libs.ktor.client.resources)
}